#!/usr/bin/env python

#starting point: train, val, test in memory from data_prep

def dummy_run(spark):
    train=spark.createDataFrame(
    [
        (82, 124, 5.0),
        (64, 123, 4.0),
        (27, 122, 3.0),
        (25, 122, 1.0),
        (12, 124, 2.0)
    ],
    ['user_id', 'book_id', 'ratings'] 
    )

    val=spark.createDataFrame(
    [
        (82, 123, 5.0),
        (64, 122, 4.0),
        (27, 124, 3.0),
        (64, 123, 2.0),
        (12, 122, 4.0)
    ],
    ['user_id', 'book_id', 'ratings'] 
    )
    
    predictions=als(spark, train, val, lamb=0.01, rank=3)
    print(predictions)
    print(type(predictions))
    predictions.show()
    return 

def als(spark, train, val, lamb, rank):
    ''' 
        Fits ALS model from train and makes predictions 
        Imput: training file
        arguments:
            spark - spark
            lamba - 
            rank - 
        Returns: Predictions generated by als 
    Notes: 
        https://spark.apache.org/docs/2.2.0/ml-collaborative-filtering.html
        - Don't need to consider alpha bc using explicit feedback
        - Assignment readme : only need to tune rank and lambda...will leave other als params 
        - Question: not sure what to do about the nonnegative param in als "specifies whether or not to
         use nonnegative constraints for least squares (defaults to false)"
        - "Currently the supported cold start strategies are 'nan' and 'drop'. Spark allows users to set the 
        coldStartStrategy parameter to “drop” in order to drop any rows in the DataFrame of predictions that contain NaN values. 
        The evaluation metric will then be computed over the non-NaN data and will be valid" 
       
    '''
    from pyspark.ml.recommendation import ALS

    als = ALS(rank = rank, regParam=lamb, userCol="user_id", itemCol="book_id", ratingCol='rating', implicitPrefs=False, coldStartStrategy="drop")
    model = als.fit(train)
   
    predictions = model.transform(val)
    return predictions

def evaluate(truth, preds):

    from pyspark.ml.evaluation import RegressionEvaluator
    from pyspark.mllib.evaluation import RankingMetrics
    
    #make the true utility matrix
    true_value = val.select('user_id', 'book_id').groupBy('user_id').agg(expr('collect_list(track_id_indexed) as true_value'))
    
    #auc

    #average precision

    #reciprocal rank


#use spark grid search -- see example code
def hyperparam_search(train):

    lambs=[0.0001, 0.001, 0.01, 0.1, 1, 10]
    ranks=[5, 10, 100, 500, 1000, 10000]

    for i in lambs:
        for j in ranks:
            model=fit_als(train, lamb=i, rank=j)





